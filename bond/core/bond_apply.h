//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_BOND_CPP.tt
//     File     : bond_apply.h
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
    

#pragma once

#include "bond_types.h"

#include <bond/core/bond.h>
#include <bond/stream/output_buffer.h>

#include "bond_const_apply.h"

namespace bond
{
//
// Overloads of Apply function with common transforms for SerializableExceptionBase.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
           const bond::bonded<SerializableExceptionBase>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const SerializableExceptionBase& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for Void.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<Void>& transform, 
           const bond::bonded<Void>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const Void& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Void& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Void& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Void& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Void& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Void& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Void& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Void& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Void& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for GUID.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<GUID>& transform, 
           const bond::bonded<GUID>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const GUID& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const GUID& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const GUID& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const GUID& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const GUID& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const GUID& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const GUID& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const GUID& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const GUID& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for Variant.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<Variant>& transform, 
           const bond::bonded<Variant>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const Variant& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Variant& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Variant& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Variant& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Variant& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Variant& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Variant& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Variant& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Variant& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for Metadata.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
           const bond::bonded<Metadata>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const Metadata& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for TypeDef.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
           const bond::bonded<TypeDef>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const TypeDef& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for FieldDef.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
           const bond::bonded<FieldDef>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const FieldDef& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for StructDef.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
           const bond::bonded<StructDef>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const StructDef& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for SchemaDef.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
           const bond::bonded<SchemaDef>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const SchemaDef& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for Polymorphic.
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY

bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
           const bond::bonded<Polymorphic>& bonded);
#endif 

#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY

bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const Polymorphic& obj);
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded);

    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif

    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value);

#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value);
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value);
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value);
#       endif
#   endif
#endif 



} // namespace bond
