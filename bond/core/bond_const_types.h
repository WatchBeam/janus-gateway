
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_BOND_CPP.tt
//     File     : bond_const_types.h
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
    

#pragma once


#include <bond/core/bond_version.h>
#if BOND_MAJOR_VERSION_MIN_SUPPORTED > 3 \
    || (BOND_MAJOR_VERSION_MIN_SUPPORTED == 3 && BOND_MINOR_VERSION_MIN_SUPPORTED > 0) 
#error This file was generated by an older Bond compiler which is \
       incompatible with current Bond library. Please regenerate \
       with the latest Bond compiler.
#endif

#include <bond/core/config.h>
#include <bond/core/containers.h>
#include "bond_const_enum.h"

namespace bond
{
namespace _bond_enumerators
{
namespace BondDataType
{

// List of supported data types for fields

extern const std::map<enum BondDataType, std::string> _value_to_name_BondDataType;
extern const std::map<std::string, enum BondDataType> _name_to_value_BondDataType;

inline 
const char* GetTypeName(enum BondDataType)
{
    return "BondDataType";
}

inline 
const char* GetTypeName(enum BondDataType, const bond::qualified_name_tag&)
{
    return "bond.BondDataType";
}

inline 
const std::map<enum BondDataType, std::string>& GetValueToNameMap(enum BondDataType)
{
    return ::bond::_bond_enumerators::BondDataType::_value_to_name_BondDataType;
}

inline 
const std::map<std::string, enum BondDataType>& GetNameToValueMap(enum BondDataType)
{
    return ::bond::_bond_enumerators::BondDataType::_name_to_value_BondDataType;
}

inline 
const std::string& ToString(enum BondDataType value)
{
    std::map<enum BondDataType, std::string>::const_iterator it = 
        GetValueToNameMap(value).find(value);

    if (GetValueToNameMap(value).end() == it)
        bond::InvalidEnumValueException(value, "BondDataType");
    
    return it->second;
}

inline 
void FromString(const std::string& name, enum BondDataType& value)
{
    std::map<std::string, enum BondDataType>::const_iterator it = 
        ::bond::_bond_enumerators::BondDataType::_name_to_value_BondDataType.find(name);

    if (::bond::_bond_enumerators::BondDataType::_name_to_value_BondDataType.end() == it)
        bond::InvalidEnumValueException(name.c_str(), "BondDataType");
    
    value = it->second;
}

inline 
bool ToEnum(enum BondDataType& value, const std::string& name)
{
    std::map<std::string, enum BondDataType>::const_iterator it = 
        ::bond::_bond_enumerators::BondDataType::_name_to_value_BondDataType.find(name);

    if (::bond::_bond_enumerators::BondDataType::_name_to_value_BondDataType.end() == it)
        return false;
    
    value = it->second;

    return true;
}

}  // namespace BondDataType
}  // namespace _bond_enumerators

namespace _bond_enumerators
{
namespace ProtocolType
{

// Magic numbers of well-known protocol types.

extern const std::map<enum ProtocolType, std::string> _value_to_name_ProtocolType;
extern const std::map<std::string, enum ProtocolType> _name_to_value_ProtocolType;

inline 
const char* GetTypeName(enum ProtocolType)
{
    return "ProtocolType";
}

inline 
const char* GetTypeName(enum ProtocolType, const bond::qualified_name_tag&)
{
    return "bond.ProtocolType";
}

inline 
const std::map<enum ProtocolType, std::string>& GetValueToNameMap(enum ProtocolType)
{
    return ::bond::_bond_enumerators::ProtocolType::_value_to_name_ProtocolType;
}

inline 
const std::map<std::string, enum ProtocolType>& GetNameToValueMap(enum ProtocolType)
{
    return ::bond::_bond_enumerators::ProtocolType::_name_to_value_ProtocolType;
}

inline 
const std::string& ToString(enum ProtocolType value)
{
    std::map<enum ProtocolType, std::string>::const_iterator it = 
        GetValueToNameMap(value).find(value);

    if (GetValueToNameMap(value).end() == it)
        bond::InvalidEnumValueException(value, "ProtocolType");
    
    return it->second;
}

inline 
void FromString(const std::string& name, enum ProtocolType& value)
{
    std::map<std::string, enum ProtocolType>::const_iterator it = 
        ::bond::_bond_enumerators::ProtocolType::_name_to_value_ProtocolType.find(name);

    if (::bond::_bond_enumerators::ProtocolType::_name_to_value_ProtocolType.end() == it)
        bond::InvalidEnumValueException(name.c_str(), "ProtocolType");
    
    value = it->second;
}

inline 
bool ToEnum(enum ProtocolType& value, const std::string& name)
{
    std::map<std::string, enum ProtocolType>::const_iterator it = 
        ::bond::_bond_enumerators::ProtocolType::_name_to_value_ProtocolType.find(name);

    if (::bond::_bond_enumerators::ProtocolType::_name_to_value_ProtocolType.end() == it)
        return false;
    
    value = it->second;

    return true;
}

}  // namespace ProtocolType
}  // namespace _bond_enumerators


} // namespace bond
