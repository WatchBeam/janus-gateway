//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_BOND_CPP.tt
//     File     : bond_apply.cpp
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
    

#include "bond_apply.h"
#include "bond_reflection.h"


namespace bond
{
//
// Overloads of Apply function with common transforms for SerializableExceptionBase 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
           const bond::bonded<SerializableExceptionBase>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const SerializableExceptionBase& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<SerializableExceptionBase>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const SerializableExceptionBase& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SerializableExceptionBase>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SerializableExceptionBase, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for Void 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<Void>& transform, 
           const bond::bonded<Void>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const Void& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Void& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Void& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Void& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Void& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Void& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Void& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Void>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Void& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Void& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Void>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Void, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for GUID 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<GUID>& transform, 
           const bond::bonded<GUID>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const GUID& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const GUID& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const GUID& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const GUID& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const GUID& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const GUID& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const GUID& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<GUID>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const GUID& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const GUID& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<GUID>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<GUID, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for Variant 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<Variant>& transform, 
           const bond::bonded<Variant>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const Variant& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Variant& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Variant& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Variant& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Variant& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Variant& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Variant& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Variant>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Variant& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Variant& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Variant>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Variant, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for Metadata 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
           const bond::bonded<Metadata>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const Metadata& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Metadata>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Metadata& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Metadata>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Metadata, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for TypeDef 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
           const bond::bonded<TypeDef>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const TypeDef& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<TypeDef>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const TypeDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<TypeDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<TypeDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for FieldDef 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
           const bond::bonded<FieldDef>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const FieldDef& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<FieldDef>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const FieldDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<FieldDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<FieldDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for StructDef 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
           const bond::bonded<StructDef>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const StructDef& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<StructDef>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const StructDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<StructDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<StructDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for SchemaDef 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
           const bond::bonded<SchemaDef>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const SchemaDef& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<SchemaDef>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const SchemaDef& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<SchemaDef>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<SchemaDef, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


//
// Overloads of Apply function with common transforms for Polymorphic 
// These overloads will be selected using argument dependent lookup
// before bond::Apply function templates. 
//
#ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
           const bond::bonded<Polymorphic>& bonded)
{
    return bond::Apply<>(transform, bonded);
}
#endif


#ifdef BOND_PREINSTANTIATE_SCHEMA_DEF_APPLY
bool BOND_CALL Apply(const bond::InitSchemaDef& transform, 
           const Polymorphic& obj)
{
    return bond::Apply<>(transform, obj);
}
#endif 

#ifdef BOND_COMPACT_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<void, bond::CompactBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::CompactBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_MAFIA_BINARY_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<void, bond::MafiaBinaryReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::MafiaBinaryWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_SIMPLE_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<void, bond::SimpleProtocolReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::SimpleProtocolWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 


#ifdef BOND_JSON_PROTOCOL
    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::To<Polymorphic>& transform, 
               const bond::bonded<void, bond::JSONReader<bond::InputBuffer>&>& bonded)
    {
        return bond::Apply<>(transform, bonded);
    }


    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Serializer<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif


    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const Polymorphic& value)
    {
        return bond::Apply<>(transform, value);
    }


#   ifndef BOND_DONT_PREINSTANTIATE_BONDED_APPLY
    bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
               const bond::bonded<Polymorphic>& value)
    {
        return bond::Apply<>(transform, value);
    }
    
#       ifdef BOND_COMPACT_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::CompactBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_MAFIA_BINARY_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::MafiaBinaryReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_SIMPLE_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::SimpleProtocolReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
    
#       ifdef BOND_JSON_PROTOCOL
        bool BOND_CALL Apply(const bond::Marshaler<bond::JSONWriter<bond::OutputBuffer> >& transform, 
                   const bond::bonded<Polymorphic, bond::JSONReader<bond::InputBuffer>&>& value)
        {
            return bond::Apply<>(transform, value);
        }
#       endif
#   endif
#endif 



} // namespace bond
